// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ride.Infrastructure.Database;

#nullable disable

namespace Ride.Infrastructure.Migrations
{
    [DbContext(typeof(RideDbContext))]
    partial class RideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ride.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("Ride.Domain.Entities.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<double>("Fare")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("rides", (string)null);
                });

            modelBuilder.Entity("Ride.Domain.Entities.Position", b =>
                {
                    b.OwnsOne("Ride.Domain.ValueObject.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("longitude");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("Coordinate")
                        .IsRequired();
                });

            modelBuilder.Entity("Ride.Domain.Entities.Ride", b =>
                {
                    b.OwnsOne("Ride.Domain.ValueObject.Coordinate", "From", b1 =>
                        {
                            b1.Property<Guid>("RideId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("from_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("from_longitude");

                            b1.HasKey("RideId");

                            b1.ToTable("rides");

                            b1.WithOwner()
                                .HasForeignKey("RideId");
                        });

                    b.OwnsOne("Ride.Domain.ValueObject.Coordinate", "To", b1 =>
                        {
                            b1.Property<Guid>("RideId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("to_latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("to_longitude");

                            b1.HasKey("RideId");

                            b1.ToTable("rides");

                            b1.WithOwner()
                                .HasForeignKey("RideId");
                        });

                    b.Navigation("From")
                        .IsRequired();

                    b.Navigation("To")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
